{"remainingRequest":"C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\src\\service\\ServicioClima.js","dependencies":[{"path":"C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\src\\service\\ServicioClima.js","mtime":1635292067724},{"path":"C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\babel.config.js","mtime":1635258813612},{"path":"C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Hugo\\Documents\\Terrabionic\\Proyectos\\pwaClima\\pwaclima\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0h1Z28vRG9jdW1lbnRzL1RlcnJhYmlvbmljL1Byb3llY3Rvcy9wd2FDbGltYS9wd2FjbGltYS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQzovVXNlcnMvSHVnby9Eb2N1bWVudHMvVGVycmFiaW9uaWMvUHJveWVjdG9zL3B3YUNsaW1hL3B3YWNsaW1hL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzovVXNlcnMvSHVnby9Eb2N1bWVudHMvVGVycmFiaW9uaWMvUHJveWVjdG9zL3B3YUNsaW1hL3B3YWNsaW1hL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwoKdmFyIFNlcnZpY2lvQ2xpbWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNlcnZpY2lvQ2xpbWEoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VydmljaW9DbGltYSk7CgogICAgdGhpcy5sYXRpdHVkID0gMDsKICAgIHRoaXMubG9uZ2l0dWQgPSAwOwogICAgdGhpcy50ZW1wZXJhdHVyYSA9IDA7CiAgICB0aGlzLnRlbXBlcmF0dXJhTWF4ID0gMDsKICAgIHRoaXMudGVtcGVyYXR1cmFNaW4gPSAwOwogICAgdGhpcy5ub21icmVDaXVkYWQgPSAiIjsKICAgIHRoaXMuc2Vuc2FjaW9uID0gMDsKICAgIHRoaXMuaHVtZWRhZCA9IDEwMDsKICAgIHRoaXMuZXN0YWRvQ2xpbWEgPSAiIjsKICAgIHRoaXMuZGVzY3JpcGNpb24gPSAiUmVhbGl6YSB1bmEgYsO6c3F1ZWRhIHBvciBjb29yZGVuYWRhcyBwYXJhIG9idGVuZXIgZWwgZXN0YWRvIGRlbCBjbGltYSEgOkQiOwogICAgdGhpcy5tZXRyaWNhID0gIkMiOwogICAgdGhpcy5pY29ubyA9IDA7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU2VydmljaW9DbGltYSwgW3sKICAgIGtleTogImFjdHVhbGl6YXJDbGltYSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2FjdHVhbGl6YXJDbGltYSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShsYXQsIGxvbikgewogICAgICAgIHZhciBkYXRvc0NsaW1hOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMubGF0aXR1ZCA9IGxhdDsKICAgICAgICAgICAgICAgIHRoaXMubG9uZ2l0dWQgPSBsb247CiAgICAgICAgICAgICAgICBkYXRvc0NsaW1hID0gbnVsbDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAzOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vYkNsaW1hKGxhdCwgbG9uKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgZGF0b3NDbGltYSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDk7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDMpOwogICAgICAgICAgICAgICAgZGF0b3NDbGltYSA9IHRoaXMuc2V0RXJyb3JEYXRvcygpOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgdGhpcy5sbGVuYXJEYXRvcyhkYXRvc0NsaW1hKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMsIFtbMywgOV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYWN0dWFsaXphckNsaW1hKF94LCBfeDIpIHsKICAgICAgICByZXR1cm4gX2FjdHVhbGl6YXJDbGltYS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYWN0dWFsaXphckNsaW1hOwogICAgfSgpCiAgfSwgewogICAga2V5OiAib2JDbGltYSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX29iQ2xpbWEgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGxhdCwgbG9uKSB7CiAgICAgICAgdmFyIGFwcElkLCBlbmRwb2ludCwgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGFwcElkID0gJ2ExYjZhZDk1OTFkNjE2NThmNjZmZTk0ZGRlZGI0ZjljJzsKICAgICAgICAgICAgICAgIGVuZHBvaW50ID0gImh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP2xhdD0iLmNvbmNhdChsYXQsICImbG9uPSIpLmNvbmNhdChsb24sICImdW5pdHM9bWV0cmljJmxhbmc9ZXMmYXBwaWQ9IikuY29uY2F0KGFwcElkKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaChlbmRwb2ludCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQyLnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBvYkNsaW1hKF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF9vYkNsaW1hLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBvYkNsaW1hOwogICAgfSgpCiAgfSwgewogICAga2V5OiAic2V0RXJyb3JEYXRvcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RXJyb3JEYXRvcygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBsYXQ6IDAsCiAgICAgICAgbG9uOiAwLAogICAgICAgIHRlbXBlcmF0dXJhOiAwLAogICAgICAgIHRlbXBlcmF0dXJhTWF4OiAwLAogICAgICAgIHRlbXBlcmF0dXJhTWluOiAwLAogICAgICAgIG5vbWJyZUNpdWRhZDogIiIsCiAgICAgICAgc2Vuc2FjaW9uOiAwLAogICAgICAgIGh1bWVkYWQ6IDAsCiAgICAgICAgZXN0YWRvQ2xpbWE6ICIiLAogICAgICAgIG1ldHJpY2E6ICIiLAogICAgICAgIGRlc2NyaXBjaW9uOiAiTm8gc2UgcHVkaWVyb24gb2J0ZW5lciBsb3MgZGF0b3MgZGVsIGNsaW1hIDooLCBpbnRlbnRhIGRlIG51ZXZvIG3DoXMgdGFyZGUuICIsCiAgICAgICAgaWNvbm86IDAKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsbGVuYXJEYXRvcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbGxlbmFyRGF0b3MoZGF0b3NDbGltYSkgewogICAgICB0aGlzLmxhdGl0dWQgPSBkYXRvc0NsaW1hLmNvb3JkLmxhdDsKICAgICAgdGhpcy5sb25naXR1ZCA9IGRhdG9zQ2xpbWEuY29vcmQubG9uOwogICAgICB0aGlzLnRlbXBlcmF0dXJhID0gTWF0aC5yb3VuZChkYXRvc0NsaW1hLm1haW4udGVtcCk7CiAgICAgIHRoaXMudGVtcGVyYXR1cmFNYXggPSBNYXRoLnJvdW5kKGRhdG9zQ2xpbWEubWFpbi50ZW1wX21heCk7CiAgICAgIHRoaXMudGVtcGVyYXR1cmFNaW4gPSBNYXRoLnJvdW5kKGRhdG9zQ2xpbWEubWFpbi50ZW1wX21pbik7CiAgICAgIHRoaXMubm9tYnJlQ2l1ZGFkID0gZGF0b3NDbGltYS5uYW1lOwogICAgICB0aGlzLnNlbnNhY2lvbiA9IE1hdGgucm91bmQoZGF0b3NDbGltYS5tYWluLmZlZWxzX2xpa2UpOwogICAgICB0aGlzLmh1bWVkYWQgPSBkYXRvc0NsaW1hLm1haW4uaHVtaWRpdHk7CiAgICAgIHRoaXMuZXN0YWRvQ2xpbWEgPSBkYXRvc0NsaW1hLndlYXRoZXJbMF0ubWFpbjsKICAgICAgdGhpcy5kZXNjcmlwY2lvbiA9IGRhdG9zQ2xpbWEud2VhdGhlclswXS5kZXNjcmlwdGlvbjsKICAgICAgdGhpcy5pY29ubyA9IHRoaXMub2J0ZW5lcklkQ2xpbWEoZGF0b3NDbGltYS53ZWF0aGVyWzBdLmlkKTsKICAgICAgdGhpcy5tZXRyaWNhID0gIkMiOwogICAgfQogIH0sIHsKICAgIGtleTogIm9idGVuZXJJZENsaW1hIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvYnRlbmVySWRDbGltYShpZCkgewogICAgICBpZiAoaWQgPiAxMDAgJiYgaWQgPCAxOTkpIHsKICAgICAgICByZXR1cm4gMTsgLy9JY29ubyB0b3JtZW50YQogICAgICAgIC8vcmV0dXJuIHJlcXVpcmUoJy4uL2Fzc2V0cy9lbGVjdHJpY2FfZGFyay5wbmcnKTsKICAgICAgfQoKICAgICAgaWYgKGlkID4gMTk5ICYmIGlkIDwgMjMzKSB7CiAgICAgICAgLy9yZXR1cm4gMiAvL0ljb25vIHRvcm1lbnRhCiAgICAgICAgcmV0dXJuICcuLi9hc3NldHMvZWxlY3RyaWNhX2RhcmsucG5nJzsKICAgICAgfQoKICAgICAgaWYgKGlkID4gMjk5ICYmIGlkIDwgMzIyKSB7CiAgICAgICAgLy8gcmV0dXJuIDMgLy9JY29ubyBsbG92aXpuYQogICAgICAgIHJldHVybiAnLi4vYXNzZXRzL2NodWJhc2Nvc19kYXJrLnBuZyc7CiAgICAgIH0KCiAgICAgIGlmIChpZCA+IDQ5OSAmJiBpZCA8IDUzMikgewogICAgICAgIC8vIHJldHVybiA0IC8vSWNvbm8gbGx1dmlhCiAgICAgICAgcmV0dXJuICcuLi9hc3NldHMvbGx1dmlhX2RhcmsucG5nJzsKICAgICAgfQoKICAgICAgaWYgKGlkID4gNTk5ICYmIGlkIDwgNjIzKSB7CiAgICAgICAgLy8gcmV0dXJuIDUgLy9JY29ubyBuaWV2ZQogICAgICAgIHJldHVybiAnLi4vYXNzZXRzL25ldmFkYV9kYXJrLnBuZyc7CiAgICAgIH0KCiAgICAgIGlmIChpZCA8PSAxOTkpIHsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNlcnZpY2lvQ2xpbWE7Cn0oKTsKCmV4cG9ydCBkZWZhdWx0IFNlcnZpY2lvQ2xpbWE7"},{"version":3,"sources":["C:/Users/Hugo/Documents/Terrabionic/Proyectos/pwaClima/pwaclima/src/service/ServicioClima.js"],"names":["ServicioClima","latitud","longitud","temperatura","temperaturaMax","temperaturaMin","nombreCiudad","sensacion","humedad","estadoClima","descripcion","metrica","icono","lat","lon","datosClima","obClima","setErrorDatos","llenarDatos","appId","endpoint","fetch","response","json","coord","Math","round","main","temp","temp_max","temp_min","name","feels_like","humidity","weather","description","obtenerIdClima","id"],"mappings":"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","sourcesContent":["class ServicioClima{\r\n    constructor(){\r\n        this.latitud = 0\r\n        this.longitud = 0\r\n        this.temperatura = 0\r\n        this.temperaturaMax = 0\r\n        this.temperaturaMin = 0\r\n        this.nombreCiudad = \"\"\r\n        this.sensacion = 0\r\n        this.humedad = 100\r\n        this.estadoClima = \"\"\r\n        this.descripcion = \"Realiza una búsqueda por coordenadas para obtener el estado del clima! :D\"\r\n        this.metrica = \"C\"\r\n        this.icono = 0\r\n    }\r\n\r\n    async actualizarClima(lat,lon){\r\n        this.latitud = lat\r\n        this.longitud = lon\r\n        let datosClima = null\r\n        try{\r\n            datosClima = await this.obClima(lat,lon)\r\n        }catch(e){\r\n            datosClima = this.setErrorDatos()\r\n        }\r\n        this.llenarDatos(datosClima)\r\n    }\r\n\r\n    async obClima(lat, lon){\r\n        let appId = 'a1b6ad9591d61658f66fe94ddedb4f9c'\r\n        let endpoint = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=es&appid=${appId}`\r\n        let response = await fetch(endpoint)       \r\n        return await response.json()\r\n    }\r\n    setErrorDatos(){\r\n        return{\r\n            lat: 0,\r\n            lon: 0,\r\n            temperatura: 0,\r\n            temperaturaMax: 0,\r\n            temperaturaMin: 0,\r\n            nombreCiudad: \"\",\r\n            sensacion: 0,\r\n            humedad: 0,\r\n            estadoClima: \"\",\r\n            metrica: \"\",\r\n            descripcion: \"No se pudieron obtener los datos del clima :(, intenta de nuevo más tarde. \",\r\n            icono: 0\r\n\r\n        }\r\n    }\r\n    llenarDatos(datosClima){\r\n        this.latitud = datosClima.coord.lat\r\n        this.longitud = datosClima.coord.lon\r\n        this.temperatura = Math.round(datosClima.main.temp)\r\n        this.temperaturaMax = Math.round(datosClima.main.temp_max)\r\n        this.temperaturaMin = Math.round(datosClima.main.temp_min)\r\n        this.nombreCiudad = datosClima.name\r\n        this.sensacion = Math.round(datosClima.main.feels_like)\r\n        this.humedad = datosClima.main.humidity\r\n        this.estadoClima = datosClima.weather[0].main\r\n        this.descripcion = datosClima.weather[0].description\r\n        this.icono = this.obtenerIdClima(datosClima.weather[0].id)\r\n        this.metrica = \"C\"\r\n        \r\n        \r\n    }\r\n\r\n    obtenerIdClima(id){\r\n        if(id > 100 && id < 199){ \r\n            return 1 //Icono tormenta\r\n           //return require('../assets/electrica_dark.png');\r\n        }\r\n        if(id > 199 && id < 233){ \r\n            //return 2 //Icono tormenta\r\n            return ('../assets/electrica_dark.png');\r\n        }\r\n        if(id > 299 && id < 322){\r\n           // return 3 //Icono llovizna\r\n            return ('../assets/chubascos_dark.png');\r\n        }\r\n        if(id > 499 && id < 532){\r\n           // return 4 //Icono lluvia\r\n           return ('../assets/lluvia_dark.png');\r\n        }\r\n        if(id > 599 && id < 623){\r\n           // return 5 //Icono nieve\r\n           return ('../assets/nevada_dark.png');\r\n        }\r\n        if(id <= 199){\r\n            return 0\r\n        }\r\n    }\r\n    \r\n   \r\n}\r\nexport default ServicioClima;"]}]}